import math

# built-in definition
type Real = f32 | f64 | decimal

# 3D-vector record type (pass-by-value)
record vector3 of T where Real
	T x
	T y
	T z

	static zero = self(T(), T(), T())

	new T x, T y, T z :=
		this.x = x
		this.y = y
		this.z = z

	oper + := auto
	oper - := auto
	oper * T rhs := self(x * rhs, y * rhs, z * rhs)
	oper / T rhs := self(x / rgs, y / rhs, z / rhs)

	get T length := sqrt(x * x + y * y + z * z)

	set T length :=
		len = length
		guard len > 0
			ret
		mul = value / len
		x *= mul
		y *= mul
		z *= mul

	get self unit :=
		match len = length
			0 => self.zero
			_ => self(x / len, y / len, z / len)

	reflect self normal :=
		this - (v.dot(n) * 2) * normal

incident = Vec3(1, -1, 0).unit
normal = Vec3(0, 1, 0)
reflected = incident.reflect(normal)

(f32 -> f32) sine = (f32 x -> f32) := sin(x)

Maybe of (f32 -> f32)

y = sine(PI)
