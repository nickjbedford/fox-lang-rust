# Point class
data Vec3
	x:Float
	y:Float
	z:Float

impl Vec3
	dot(v:Vec3) := self.x * v.x + self.y * v.y + self.z * v.z
	length := sqrt(v.dot(v))
	unit :=
		match let len = self.length
			0 => self
			_ => self / len
	reflect(n:Vec3) := self - (self.dot(n) * 2.0) * normal

operator + (a:Vec3, b:Vec3) = Vec3(a.x + b.x, a.y + b.y, a.z + b.z)
operator - (a:Vec3, b:Vec3) = Vec3(a.x + b.x, a.y + b.y, a.z + b.z)
operator * (a:Vec3, b:Float) = Vec3(a.x * b, a.y * b, a.z * b)
operator / (a:Vec3, b:Float) = Vec3(a.x / b, a.y / b, a.z / b)

let incident = Vec3(1, -1, 0).unit
let normal = Vec3(0, 1, 0)
let reflected = incident.reflect(normal)

let sine = (x:Float) := sin(x)
