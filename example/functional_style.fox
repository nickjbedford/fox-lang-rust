type Size = u64
type Index = u64

record Pair of Key/Value
	Key first
	Value second

export enum Maybe of Value
	Some(Value)
	None

trait Sequence of Key = Index/Value
	get iterator -> Iterator of Pair of Key/Value :=
	get count -> Size :=
	get [Index index] -> Maybe of Value :=

impl Filterable of Pair of Key/Value on Sequence of Key/Value
	filter (Pair of Key/Value) -> bool predicate := filter(sequence, predicate)

enum Result of Value, Err = string
	Okay(Value)
	Error(Err)

find of Value/Key (Sequence of Key/Value sequence, Value element) -> Maybe of Key :=
	ret match sequence.filter(item := item.second == element)[0]
		Some(key, _) => Some(key)
		None => None

reduce of T, R (Sequence of T sequence, (R, T) -> R accumulator, R initial) -> R :=
	ret match sequence[0]
		Some(value) => reduce(sequence[1..] ?? [], accumulator, accumulator(initial))
		None => initial

fold of T, R (Sequence of T sequence, ((Maybe of R, T) -> R) accumulator) -> Maybe of R :=
	ret match sequence[0]
		Some(first) => reduce(sequence[1..] ?? [], accumulator, first)
		None => None

main :=
	a = [ 1, 2, 3, 4, 5 ]
	i = find(a, 3) # i == 2

	mut i32[] a

	map = [
		2 => 3,
		5 => 5
	]

	interp = "${a}"


	b = [
		"hello" => 1,
		"goodbye" => 2,
		"what?" => 3
	]
	key = find(b, 2) # key == "goodbye"

	b = a[1..] # [ 2, 3, 4, 5 ]