protocol Sequence of T, K
	get iterator -> Iterator :=
	get count -> u64 :=
	get [u64 index] :=

enum Maybe of T
	Some(T)
	None

enum Result of T, E = string
	Okay(T)
	Error(E)

find of K, T (Sequence of K, T sequence, T item) -> Maybe of K :=
	for key in sequence.keys
		if sequence[key] == item
			ret Some(key)
	ret None

reduce of T, R (Sequence of T sequence, (R, T) -> R accumulator, R initial) -> R :=
	ret match sequence[0]
		Some(value) => reduce(sequence[1..] ?? [], accumulator, accumulator(initial))
		None => initial

fold of T, R (Sequence of T sequence, ((Maybe of R, T) -> R) accumulator) -> Maybe of R :=
	ret match sequence[0]
		Some(first) => reduce(sequence[1..] ?? [], accumulator, first)
		None => None

main :=
	a = [ 1, 2, 3, 4, 5 ]
	i = find(a, 3) // i == 2

	mut i32[] a

	map = [
		2 => 3,
		5 => 5
	]

	interp = "${a}"

	b = [
		"hello" => 1,
		"goodbye" => 2,
		"what?" => 3
	]
	key = find(b, 2) // key == "goodbye"

	b = a[1..] // [ 2, 3, 4, 5 ]